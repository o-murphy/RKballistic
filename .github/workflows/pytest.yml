# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Pytest

on:
  pull_request:
    branches:
      - '*'
  workflow_dispatch:


jobs:
  test:
    name: Project Tests (${{ matrix.os }} / Python ${{ matrix.python-version }})
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-13, macos-14 ]
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv and set the python version ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install project dependencies
        run: |
          uv sync --dev
          uv pip install -e .[dev]

      - name: Run main project tests
        run: |
          python -m pytest ./tests -v
        shell: bash

  test_pyballisticcalc:
    name: py-ballisticcalc Tests (${{ matrix.os }} / Python ${{ matrix.python-version }})
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-13, macos-14 ]
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv and set the python version ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get py-ballisticcalc installed version from main project (if applicable)
        # This step assumes 'py-ballisticcalc' is a dependency of the main project
        # and its version is determined by the main project's lock file.
        # If py-ballisticcalc is not a direct dependency, you might need a different way
        # to determine the version to clone, or remove this step and hardcode a version.
        run: |
          # First, install main project's dependencies to ensure py-ballisticcalc is available for metadata check
          uv sync --dev
          uv pip install -e .[dev]
          cd py-ballisticcalc
          echo "pybc_version=$(python -c 'from importlib.metadata import metadata; print(metadata("py-ballisticcalc")["Version"])')" >> "$GITHUB_OUTPUT"
        id: get_installed_version
        shell: bash

      - name: Clone py-ballisticcalc from specific tag based on installed version
        run: |
          # Access the version obtained from the previous step's output
          PYBC_VERSION="${{ steps.get_installed_version.outputs.pybc_version }}"
          echo "Cloning py-ballisticcalc with tag: v$PYBC_VERSION"
          git clone --branch "v$PYBC_VERSION" --single-branch https://github.com/o-murphy/py-ballisticcalc.git py-ballisticcalc
        shell: bash

      - name: Run py-ballisticcalc tests with --engine=RKballistic
        run: |
          cd py-ballisticcalc
          pytest ./tests -v --engine=RKballistic
        shell: bash
